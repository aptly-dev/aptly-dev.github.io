<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Docs on aptly - Debian repository management tool </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://beta.aptly.info/doc/index.xml</link>
    <language>en-us</language>
    <author>Andrey Smirnov</author>
    
    <updated>Fri, 08 Aug 2014 11:17:38 UTC</updated>
    
    <item>
      <title>aptly db recover</title>
      <link>http://beta.aptly.info/doc/aptly/db/recover</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://beta.aptly.info/doc/aptly/db/recover</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly db recover&lt;/h2&gt;

&lt;p&gt;Database recover does its best to recover database after crash. It is
recommended to backup DB before running recover. Recover procedures
ignores all index files and tries to reconstruct them from &lt;code&gt;.sst&lt;/code&gt; files.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly db recover
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly db recover
Recovering DB...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>aptly graph</title>
      <link>http://beta.aptly.info/doc/aptly/graph</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://beta.aptly.info/doc/aptly/graph</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly graph&lt;/h2&gt;

&lt;p&gt;aptly generates graph showing depedencies between mirrors, local repositories,
snapshots and published repositories.
 &lt;/p&gt;

&lt;p&gt;Command graph generates graph of dependencies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;between snapshots and mirrors (what mirror was used to create each snapshot)&lt;/li&gt;
&lt;li&gt;between snapshots and local repos (what local repo was used to create snapshot)&lt;/li&gt;
&lt;li&gt;between snapshots (pulling, merging, etc.)&lt;/li&gt;
&lt;li&gt;between snapshots, local repos and published repositories (how snapshots were published).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Graph is rendered to PNG file using graphviz package.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly graph
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/img/graphfull.png&#34;&gt;&lt;img src=&#34;/img/graph.png&#34; alt=&#34;Example graph from aptly graph&#34; class=&#34;img-responsive&#34;&gt;&lt;/a&gt;
 &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>aptly mirror</title>
      <link>http://beta.aptly.info/doc/aptly/mirror</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://beta.aptly.info/doc/aptly/mirror</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly mirror&lt;/h2&gt;

&lt;p&gt;aptly allows to create mirrors of remote Debian repositories, currently only HTTP repositories are supported.
Mirrors are created with &lt;a href=&#34;/doc/aptly/mirror/create/&#34;&gt;&lt;code&gt;aptly mirror create&lt;/code&gt;&lt;/a&gt; command, mirror contents
are downloaded with &lt;a href=&#34;/doc/aptly/mirror/update/&#34;&gt;&lt;code&gt;aptly mirror update&lt;/code&gt;&lt;/a&gt; command. Mirror could be updated
at any moment. In order to preserve current mirror state, &lt;a href=&#34;/doc/aptly/snapshot/create/&#34;&gt;create snapshot&lt;/a&gt; of the
mirror. Snapshot could be published or used to build other snapshots.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>aptly snapshot</title>
      <link>http://beta.aptly.info/doc/aptly/snapshot</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://beta.aptly.info/doc/aptly/snapshot</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly snapshot&lt;/h2&gt;

&lt;p&gt;Snapshot is a fixed state of remote repository mirror or local repository.
Internally snapshot is list of references to packages. Snapshot is immutable, i.e. it
can&amp;rsquo;t be changed since it has been created. Snapshots could be &lt;a href=&#34;/doc/aptly/snapshot/merge/&#34;&gt;merged&lt;/a&gt;,
individual packages could be &lt;a href=&#34;/doc/aptly/snapshot/pull/&#34;&gt;pulled&lt;/a&gt;, snapshot could be
&lt;a href=&#34;/doc/aptly/snapshot/verify/&#34;&gt;verified&lt;/a&gt; for missing dependencies. Finally, snapshots could be
&lt;a href=&#34;/doc/aptly/publish/snapshot&#34;&gt;published as repositories&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Publishing to S3</title>
      <link>http://beta.aptly.info/doc/feature/s3</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://beta.aptly.info/doc/feature/s3</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Publishing to Amazon S3&lt;/h2&gt;

&lt;p&gt;aptly could be configured to publish repository directly to Amazon S3.
First, publishing endpoints should be described in aptly
&lt;a href=&#34;/doc/configuration/&#34;&gt;configuration&lt;/a&gt; file. Each endpoint has name and
associated settings:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;region&lt;/code&gt;: Amazon region for S3 bucket (e.g. &lt;code&gt;us-east-1&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bucket&lt;/code&gt;: bucket name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prefix&lt;/code&gt;: (optional) do publishing under specified prefix in the
bucket, defaults to no prefix (bucket root)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;acl&lt;/code&gt;: (optional) assign ACL to published files (one of the canned
ACLs in Amazon terminology). Useful values: &lt;code&gt;private&lt;/code&gt; (default) or
&lt;code&gt;public-read&lt;/code&gt; (public repository). Public repositories could be
consumed by &lt;code&gt;apt&lt;/code&gt; using HTTP endpoint (Amazon bucket should be
configured for &amp;ldquo;website hosting&amp;rdquo;), for private repositories special
apt S3 transport is required.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;awsAccessKeyID&lt;/code&gt;, &lt;code&gt;awsSecretAccessKey&lt;/code&gt;: (optional) Amazon
credentials to access S3 bucket. If not supplied, environment
variables &lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt; and &lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt; are used.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;S3 bucket used for publishing should be empty initially and should not
be used to store other data, as aptly might remove objects while doing
cleanup operation. If &lt;code&gt;prefix&lt;/code&gt; is configured, bucket should be empty
under the prefix (aptly won&amp;rsquo;t touch any objects outside prefix).&lt;/p&gt;

&lt;p&gt;In order to publish to S3, specify endpoint as &lt;code&gt;s3:endpoint-name:&lt;/code&gt;
before publishing prefix on the command line, e.g.:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly publish snapshot wheezy-main s3:test:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, with prefix:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly publish snapshot wheezy-main s3:test:debian/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you would like to publish public repository to Amazon S3, create
bucket, enable website hosting option at Amazon console. Specify bucket
name, region and access keys in aptly configuration under
&lt;code&gt;S3PublishEndpoints&lt;/code&gt;. Use &lt;code&gt;public-read&lt;/code&gt; as value for &lt;code&gt;acl&lt;/code&gt; parameter.
Published repository could be added to &lt;code&gt;/etc/apt/sources.list&lt;/code&gt; by using
public HTTP URL, like any other HTTP repository.&lt;/p&gt;

&lt;p&gt;For private repositories, don&amp;rsquo;t enable website hosting option and use
&lt;code&gt;private&lt;/code&gt; as value for &lt;code&gt;acl&lt;/code&gt; parameter. Install
&lt;a href=&#34;https://github.com/brianm/apt-s3/&#34;&gt;apt-s3&lt;/a&gt; or any other similar tool to
enable &lt;code&gt;s3://&lt;/code&gt; transport in &lt;code&gt;apt&lt;/code&gt;. Use special URLs to include your
private repository in &lt;code&gt;/etc/apt/sources.list&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deb s3://&amp;lt;access-key&amp;gt;:[&amp;lt;secret-key&amp;gt;]@s3-eu-east-1.amazonaws.com/private-repo main
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is recommended to setup separate user in Amazon IAM for publishing to
S3. This user would have access only to one bucket for publishing and
limited operations. Sample policy (change &lt;code&gt;bucket&lt;/code&gt; to match you bucket
name):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,
  &amp;quot;Statement&amp;quot;: [
    {
      &amp;quot;Sid&amp;quot;: &amp;quot;Stmt1405592139000&amp;quot;,
      &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
      &amp;quot;Action&amp;quot;: [
        &amp;quot;s3:DeleteObject&amp;quot;,
        &amp;quot;s3:GetObject&amp;quot;,
        &amp;quot;s3:ListBucket&amp;quot;,
        &amp;quot;s3:PutObject&amp;quot;,
        &amp;quot;s3:PutObjectAcl&amp;quot;
      ],
      &amp;quot;Resource&amp;quot;: [
        &amp;quot;arn:aws:s3:::bucket/*&amp;quot;, &amp;quot;arn:aws:s3:::bucket&amp;quot;
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>aptly publish drop</title>
      <link>http://beta.aptly.info/doc/aptly/publish/drop</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://beta.aptly.info/doc/aptly/publish/drop</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly publish drop&lt;/h2&gt;

&lt;p&gt;Remove files belonging to published repository. aptly would try to
remove as many files belonging to this repository as possible. For
example, if no other published repositories share the same prefix, all
files inside prefix would be removed.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly publish drop &amp;lt;distribution&amp;gt; [[&amp;lt;endpoint:&amp;gt;]&amp;lt;prefix&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;distribution&lt;/code&gt; is a distribution name for published repository (as
displayed by &lt;code&gt;aptly publish list&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endpoint&lt;/code&gt; is publishing endpoint, if not specified, it would
default to empty endpoint (local file system).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prefix&lt;/code&gt; is an optional prefix for publishing, if not specified,
prefix is considered to be &lt;code&gt;.&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly publish drop squeeze-backports
Removing /var/aptly/public/dists/squeeze-backports...
Removing /var/aptly/public/pool/contrib...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why aptly?</title>
      <link>http://beta.aptly.info/doc/why</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://beta.aptly.info/doc/why</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Why aptly?&lt;/h2&gt;

&lt;p&gt;Linux distribution is well-tested collection of packages carefully organized and
supported by the vendor. There&amp;rsquo;s a support for the released version, including
updates, security fixes, etc. For many of us that is just enough.&lt;/p&gt;

&lt;p&gt;But sooner or later our requirements start to evolve:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we have a lot of machines and we would like to have internal mirror
of package repository, so that we could save bandwidth and manage
upgrades;&lt;/li&gt;
&lt;li&gt;some packages are missing in official distribution or are outdated,
so we need to add 3rd party repositories;&lt;/li&gt;
&lt;li&gt;we start packaging our own software (or modified versions of official
packages), so we need to host our own internal package repository.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the end, we would like &lt;strong&gt;to own package repository&lt;/strong&gt;, that is to have
package repository that is our &amp;ldquo;own distribution&amp;rdquo; tailored to fit our
needs. Relying on single vendor is fine, but if we start to manage our
own repository, we need great tools to help us. That&amp;rsquo;s where aptly comes to help us.&lt;/p&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;Mirroring remote repositories&lt;/h3&gt;

&lt;p&gt;Creating our own mirror of remote repositories has several benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;saving bandwidth if we have a lot of servers;&lt;/li&gt;
&lt;li&gt;no dependency on remote service to work properly in order to manage
critical pieces of infrastructure;&lt;/li&gt;
&lt;li&gt;reproducible package installation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Last point requires some comments: if I setup server (install packages) by issuing
fixed set of &lt;code&gt;apt-get install package&lt;/code&gt; commands, I get some package versions installed.
If later I issue exactly the same &lt;code&gt;apt-get install package&lt;/code&gt; commands on the second
server, I might get slightly different set of package versions, as remote repository
might have been updated in the mean time.&lt;/p&gt;

&lt;p&gt;There are many tools to create mirror of Debian package repositories, not many of those tools
are able to create partial mirrors (download only specified packages) and most
important, there are just several tools that can update mirror at any moment in time and preserve previous
mirror states as snapshots.&lt;/p&gt;

&lt;p&gt;Snapshotting mirror is very important to make sure that all servers are installed from the same
snapshot. When tested, mirror could be upgraded to new snapshot.&lt;/p&gt;

&lt;p&gt;Using aptly, you can do something like that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly mirror create wheezy-main http://mirror.yandex.ru/debian/ wheezy main
$ aptly mirror update wheezy-main
$ aptly snapshot create wheezy-main-2014-08-16 from mirror wheezy-main
$ aptly publish snapshot wheezy-main-2014-08-16
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your servers are configured to download packages from your own mirror.
As Debian distribution is updated, we can take new snapshot and update published repository:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly mirror update wheezy-main
$ aptly snapshot create wheezy-main-2014-09-02 from mirror wheezy-main
$ aptly publish switch wheezy wheezy-main-2014-09-02
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;Mixing different packages sources&lt;/h3&gt;

&lt;p&gt;One can configure &lt;code&gt;apt&lt;/code&gt; to use multiple package sources via &lt;code&gt;apt.sources.list&lt;/code&gt;. This works just fine
until you get conflicts (one package coming from different sources). You might use apt pinning
to control package source priority, but this is hard to maintain and doesn&amp;rsquo;t guarantee consistent
results.&lt;/p&gt;

&lt;p&gt;Reasons to use multiple sources might be different:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;updating some packages to newer versions from &lt;code&gt;backports&lt;/code&gt; repository;&lt;/li&gt;
&lt;li&gt;using 3rd party repositories because:

&lt;ul&gt;
&lt;li&gt;they have newer versions of software available;&lt;/li&gt;
&lt;li&gt;software is not included into Debian distribution.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;installing internal software from Debian packages.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most usually we would like to add some software from 3rd party repositories into official repository,
create our own &amp;ldquo;mix&amp;rdquo;, which should be consistent, tested and available in the same state to all servers.&lt;/p&gt;

&lt;p&gt;Once state of mirrors and our internal package repositories is fixed using snapshots, we might
use &lt;a href=&#34;/doc/aptly/snapshot/pull&#34;&gt;aptly snapshot pull&lt;/a&gt; to mix packages from several snapshots into final
snapshot that would be published to be consumed from our servers. aptly would take care about dependencies,
replacing conflicting packages when required. Please see &lt;a href=&#34;/examples/&#34;&gt;examples&lt;/a&gt; on how to pull
package &lt;code&gt;nginx&lt;/code&gt; from backports.&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Managing internal package repositories&lt;/h3&gt;

&lt;p&gt;Sometimes we produce our own packages: it could be our own software or patched version of official
packages. Historically tools to create package repositories were complex and required complex
setup. aptly makes things different: managing local repositories is easy, they could be
snapshotted as remote repositories, packages from local repositories could be mixed with packages
from mirrors (in snapshots).&lt;/p&gt;

&lt;p&gt;Local repositories could be published either via snapshots or directly (loosing flexibility of
snapshots). Please see &lt;a href=&#34;/doc/aptly/repo/&#34;&gt;&lt;code&gt;aptly repo&lt;/code&gt;&lt;/a&gt; commands for examples.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>aptly snapshot list</title>
      <link>http://beta.aptly.info/doc/aptly/snapshot/list</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://beta.aptly.info/doc/aptly/snapshot/list</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly snapshot list&lt;/h2&gt;

&lt;p&gt;Displays list of all created snapshots.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly snapshot list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Flags:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-raw=false&lt;/code&gt;: display list in machine-readable format&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-sort=&amp;quot;name&amp;quot;&lt;/code&gt;: display list in &amp;lsquo;name&amp;rsquo; or creation &amp;lsquo;time&amp;rsquo; order&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly snapshot list
List of snapshots:
 * [monday-updates]: Snapshot from mirror [backports2]: http://mirror.yandex.ru/backports.org/ squeeze-backports
 * [back]: Snapshot from mirror [backports2]: http://mirror.yandex.ru/backports.org/ squeeze-backports

To get more information about snapshot, run `aptly snapshot show &amp;lt;name&amp;gt;`.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In snapshot list, basic description on the way snapshot has been created is
displayed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly snapshot list -raw
monday-updates
back
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>aptly repo remove</title>
      <link>http://beta.aptly.info/doc/aptly/repo/remove</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://beta.aptly.info/doc/aptly/repo/remove</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly repo remove&lt;/h2&gt;

&lt;p&gt;Command &lt;code&gt;remove&lt;/code&gt; deletes packages matching &lt;a href=&#34;/doc/feature/query/&#34;&gt;package query&lt;/a&gt;
from local repo &lt;code&gt;name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$  aptly repo remove &amp;lt;name&amp;gt; &amp;lt;package-query&amp;gt; ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Params are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; packages would be removed from this local repository&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package-query&lt;/code&gt; list of &lt;a href=&#34;/doc/feature/query/&#34;&gt;package queries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Flags:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-dry-run=false&lt;/code&gt;: don&amp;rsquo;t remove, just show what would be removed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When packages are removed from local repository, only references to
those packages are removed. If packages are part of any snapshot, this
action won&amp;rsquo;t remove them from snapshot. If there are no references to
the packages, package files and metadata could be cleaned up by running
command &lt;a href=&#34;/doc/aptly/db/cleanup/&#34;&gt;aptly db cleanup&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly repo remove stable percona-server-client-5.5
Loading packages...
[-] percona-server-client-5.5_5.5.35-rel33.0-611.squeeze_i386 removed
[-] percona-server-client-5.5_5.5.35-rel33.0-611.squeeze_amd64 removed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>aptly mirror drop</title>
      <link>http://beta.aptly.info/doc/aptly/mirror/drop</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://beta.aptly.info/doc/aptly/mirror/drop</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly mirror drop&lt;/h2&gt;

&lt;p&gt;Drop deletes information about remote repository mirror. Package data is
not deleted (it could be still used by other mirrors or snapshots). If
mirror is used as source to create a snapshot, aptly would refuse to
delete such mirror, use flag &lt;code&gt;-force&lt;/code&gt; to override.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly mirror drop &amp;lt;name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Params:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; is mirror name which has been given during mirror creation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Flags:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-force=false&lt;/code&gt;: drop mirror even if it used as source of some
snapshot&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dropping mirror only removes metadata about the mirror, in order to
cleanup the disk space occupied by package files you might need to run
&lt;a href=&#34;/doc/aptly/db/cleanup/&#34;&gt;&lt;code&gt;aptly db cleanup&lt;/code&gt;&lt;/a&gt; command.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly mirror drop -force wheezy-main
Mirror `wheezy-main` has been removed.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>aptly snapshot create</title>
      <link>http://beta.aptly.info/doc/aptly/snapshot/create</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://beta.aptly.info/doc/aptly/snapshot/create</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly snapshot create&lt;/h2&gt;

&lt;h4 id=&#34;toc_1&#34;&gt;Command &lt;code&gt;aptly snapshot create .. from mirror&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Creates snapshot from current state of remote mirror. Mirror should be
&lt;a href=&#34;/doc/aptly/mirror/update/&#34;&gt;updated&lt;/a&gt; at least once before running this command.&lt;/p&gt;

&lt;p&gt;Snapshot would contain exactly the same set of packages as mirror
currently does. Snapshot is immutable, so if mirror is updated, snapshot
contents won&amp;rsquo;t change. If mirror contains source packages, snapshot
would also contain source packages.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly snapshot create &amp;lt;name&amp;gt; from mirror &amp;lt;mirror-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Params are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; is a name for the snapshot to be created&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mirror-name&lt;/code&gt; is a mirror name (given when mirror was created)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly snapshot create monday-updates from mirror backports2

Snapshot monday-updates successfully created.
You can run &#39;aptly publish snapshot monday-updates&#39; to publish snapshot as Debian repository.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h4 id=&#34;toc_2&#34;&gt;Command &lt;code&gt;aptly snapshot create .. from repo&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Creates snapshot from current state of local package repository.
Repository should contain at least one package.&lt;/p&gt;

&lt;p&gt;Snapshot would contain exactly the same set of packages as local
repositorory currently does. Snapshot is immutable, so if local
repository is changed in any way, snapshot contents won&amp;rsquo;t change.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly snapshot create &amp;lt;name&amp;gt; from repo &amp;lt;repo-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Params are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; is a name for the snapshot to be created&lt;/li&gt;
&lt;li&gt;&lt;code&gt;repo-name&lt;/code&gt; is a local repository name&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly snapshot create snap-stable from repo stable

Snapshot snap-stable successfully created.
You can run &#39;aptly publish snapshot snap-stable&#39; to publish snapshot as Debian repository.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h4 id=&#34;toc_3&#34;&gt;Command &lt;code&gt;aptly snapshot create .. empty&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Creates empty snapshot. As snapshots are immutable, creating one empty
snapshot should be enough.&lt;/p&gt;

&lt;p&gt;Empty snapshots could be used as first argument to &lt;a href=&#34;/doc/aptly/snapshot/pull/&#34;&gt;&lt;code&gt;aptly snapshot pull&lt;/code&gt;&lt;/a&gt;
in order to create set of packages matching query, or as initial contents of empty
published repository.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly snapshot create &amp;lt;name&amp;gt; empty
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Params are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; is a name for the snapshot to be created&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly snapshot create empty-snapshot empty

Snapshot empty-snapshot successfully created.
You can run &#39;aptly publish snapshot empty-snapshot&#39; to publish snapshot as Debian repository.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>aptly publish repo</title>
      <link>http://beta.aptly.info/doc/aptly/publish/repo</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://beta.aptly.info/doc/aptly/publish/repo</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly publish repo&lt;/h2&gt;

&lt;p&gt;Publishes local repository directly, bypassing snapshot creation step.
Published repositories appear under &lt;code&gt;rootDir/public&lt;/code&gt; directory. Valid
&lt;a href=&#34;/doc/aptly/publish&#34;&gt;GPG key&lt;/a&gt; is required for publishing.&lt;/p&gt;

&lt;div class=&#34;alert alert-warning alert-note&#34;&gt;It is not advised to publish local repositories directly unless
repository is used to host testing versions of packages that change
frequently. For production usage please &lt;a href=&#34;/doc/aptly/snapshot/create/&#34;&gt;create snapshot&lt;/a&gt; from repository and
&lt;a href=&#34;/doc/aptly/publish/snapshot/&#34;&gt;publish it&lt;/a&gt;.&lt;/div&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly publish repo &amp;lt;name&amp;gt; [[&amp;lt;endpoint:&amp;gt;]&amp;lt;prefix&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Params:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; is a local repo name that snould be published&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endpoint&lt;/code&gt; is an optional endpoint reference. Without endpoint,
repository would be pulished to local file system. In order to
publish to Amazon S3, use endpoint name &lt;code&gt;s3:&amp;lt;name&amp;gt;:&lt;/code&gt;, where endpoint
&lt;code&gt;name&lt;/code&gt; is configured as S3 publishing endpoint in
&lt;a href=&#34;/doc/feature/s3&#34;&gt;configuration file&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prefix&lt;/code&gt; is an optional prefix for publishing, if not specified,
repository would be published to the root of publiс directory.
&lt;code&gt;prefix&lt;/code&gt; could be single directory like &lt;code&gt;ppa&lt;/code&gt; or part of the tree
like &lt;code&gt;ppa/android&lt;/code&gt;. &lt;code&gt;prefix&lt;/code&gt; shouldn&amp;rsquo;t contain &lt;code&gt;..&lt;/code&gt;, and names
&lt;code&gt;dists&lt;/code&gt; and &lt;code&gt;pool&lt;/code&gt; are not accepted. Empty &lt;code&gt;prefix&lt;/code&gt; would be
converted to &lt;code&gt;.&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Flags:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-component=&amp;quot;&amp;quot;&lt;/code&gt;: component name to publish; it is taken from local
repository default, otherwise it defaults to &lt;code&gt;main&lt;/code&gt; (for
multi-component publishing, separate components with commas)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-distribution=&amp;quot;&amp;quot;&lt;/code&gt;: distribution name to publish; guessed from local
repository default distribution&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-force-overwrite=false&lt;/code&gt;: overwrite packages files in the pool even
if content is different (see also &lt;a href=&#34;/doc/feature/duplicate/&#34;&gt;duplicate packages&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-gpg-key=&amp;quot;&amp;quot;&lt;/code&gt;: GPG key ID to use when signing the release, if not
specified default key is used&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-keyring=&amp;quot;&amp;quot;&lt;/code&gt;: GPG keyring to use (instead of default)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-label=&amp;quot;&amp;quot;&lt;/code&gt;: value for &lt;code&gt;Label:&lt;/code&gt; field&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-origin=&amp;quot;&amp;quot;&lt;/code&gt;: value for &lt;code&gt;Origin:&lt;/code&gt; field&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-secret-keyring=&amp;quot;&amp;quot;&lt;/code&gt;: GPG secret keyring to use (instead of default)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-skip-signing=false&lt;/code&gt;: don&amp;rsquo;t sign Release files with GPG&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If architectures are limited (with config &lt;code&gt;architectures&lt;/code&gt; or option
&lt;code&gt;-architectures&lt;/code&gt;), only mentioned architectures would be published,
otherwise &lt;code&gt;aptly&lt;/code&gt; will publish all architectures in the snapshot.&lt;/p&gt;

&lt;p&gt;It is not allowed to publish two repositories or snapshots to the same
&lt;code&gt;prefix&lt;/code&gt; and &lt;code&gt;distribution&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When local repository changes, published repository could be updated
in-place using command &lt;a href=&#34;/doc/aptly/publish/update/&#34;&gt;aptly publish update&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Empty local repos could be published as well (as placeholder, for
subsequent updates using &lt;a href=&#34;/doc/aptly/publish/update/&#34;&gt;aptly publish update&lt;/a&gt;
command). When publishing empty local repos it is important to specify
complete architectures list (using &lt;code&gt;-architectures&lt;/code&gt; flag), as it can&amp;rsquo;t
be changed after publishing.&lt;/p&gt;

&lt;p&gt;Multiple component repositories should be published from several local
repositories, one repository per component. In that case, command
accepts several local repositories names:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly publish repo -component=main,contrib mysoft-main mysoft-contrib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Please see &lt;a href=&#34;/doc/feature/multiple/&#34;&gt;multiple-component publishing&lt;/a&gt;
for more examples.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly publish repo local-repo
Signing file &#39;/var/aptly/public/dists/squeeze/Release&#39; with gpg, please enter your passphrase when prompted:

&amp;lt;&amp;lt;gpg asks for passphrase&amp;gt;&amp;gt;

Clearsigning file &#39;/var/aptly/public/dists/squeeze/Release&#39; with gpg, please enter your passphrase when prompted:

&amp;lt;&amp;lt;gpg asks for passphrase&amp;gt;&amp;gt;

Snapshot back has been successfully published.
Please setup your webserver to serve directory &#39;/var/aptly/public&#39; with autoindexing.
Now you can add following line to apt sources:
  deb http://your-server/ squeeze main
Don&#39;t forget to add your GPG key to apt with apt-key.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Package Queries</title>
      <link>http://beta.aptly.info/doc/feature/query</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://beta.aptly.info/doc/feature/query</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Package Queries&lt;/h2&gt;

&lt;p&gt;Some commands accept package queries to identify list of packages to
process. Package query syntax almost matches &lt;code&gt;reprepro&lt;/code&gt; query language.
Query consists of the following simple terms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;direct package reference&lt;/strong&gt;: reference to exaclty one package.
Format is identical to the way aptly lists packages in show commands
with &lt;code&gt;-with-packages&lt;/code&gt; flag: &lt;code&gt;name_version_arch&lt;/code&gt;, e.g.:
&lt;code&gt;libmysqlclient18_5.5.35-rel33.0-611.squeeze_amd64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dependency condition&lt;/strong&gt;: syntax follows Debian dependency
specification: &lt;code&gt;package_name&lt;/code&gt; followed by optional version
specification and architecture limit, e.g: &lt;code&gt;mysql-client (&amp;gt;= 3.6)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;query against package fields&lt;/strong&gt;: syntax is the same as for dependency
conditions, but instead of package name field name is used, e.g:
&lt;code&gt;Priority (optional)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Supported fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;all field names from Debian package control files are supported
except for &lt;code&gt;Filename&lt;/code&gt;, &lt;code&gt;MD5sum&lt;/code&gt;, &lt;code&gt;SHA1&lt;/code&gt;, &lt;code&gt;SHA256&lt;/code&gt;, &lt;code&gt;Size&lt;/code&gt;, &lt;code&gt;Files&lt;/code&gt;,
&lt;code&gt;Checksums-SHA1&lt;/code&gt;, &lt;code&gt;Checksums-SHA256&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$Source&lt;/code&gt; is a name of source package (for binary packages)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$SourceVersion&lt;/code&gt; is a version of source package&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$Architecture&lt;/code&gt; is &lt;code&gt;Architecture&lt;/code&gt; for binary packages and &lt;code&gt;source&lt;/code&gt;
for source packages, when matching with equal (&lt;code&gt;=&lt;/code&gt;) operator,
package with &lt;code&gt;any&lt;/code&gt; architecture matches all architectures but
&lt;code&gt;source&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$Version&lt;/code&gt; has the same value as &lt;code&gt;Version&lt;/code&gt;, but comparison operators
use Debian version precedence rules&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$PackageType&lt;/code&gt; is &lt;code&gt;deb&lt;/code&gt; for binary packages and &lt;code&gt;source&lt;/code&gt; for source
packages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Operators:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;=&lt;/code&gt;: strict match, default operator is no operator is given&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; (strictly greater), &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; (strictly less):
lexicographical comparison for all fields and special rules when
comparing package versions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt;: pattern matching, like shell patterns, supported special
symbols are: &lt;code&gt;[^]?*&lt;/code&gt;, e.g.: &lt;code&gt;$Version (% 3.5-*)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~&lt;/code&gt;: regular expression matching, e.g.: &lt;code&gt;Name (~ .*-dev)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Simple terms could be combined into more complex queries using operators
&lt;code&gt;,&lt;/code&gt; (and), &lt;code&gt;|&lt;/code&gt; (or) and &lt;code&gt;!&lt;/code&gt; (not), parentheses &lt;code&gt;()&lt;/code&gt; are used to change
operator precedence. Match value could be enclosed in single (&lt;code&gt;&#39;&lt;/code&gt;) or
double (&lt;code&gt;&amp;quot;&lt;/code&gt;) quotes if required to resolve ambiguity, quotes inside
quoted string should escaped with slash (&lt;code&gt;\&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mysql-client&lt;/code&gt;: matches package mysql-client of any version and
architecture (including source), also matches packages that
&lt;code&gt;Provide:&lt;/code&gt; &lt;code&gt;mysql-client&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mysql-client (&amp;gt;= 3.6)&lt;/code&gt;: matches package mysql-client with version
greater or equal to 3.6. Valid operators for version are: &lt;code&gt;&amp;gt;=&lt;/code&gt;,
&lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; (strictly greater), &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; (strictly less).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mysql-client {i386}&lt;/code&gt;: matches package &lt;code&gt;mysql-client&lt;/code&gt; on
architecture &lt;code&gt;i386&lt;/code&gt;, architecture &lt;code&gt;all&lt;/code&gt; matches all architectures
but source.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mysql-client (&amp;gt;= 3.6) {i386}&lt;/code&gt;: version and architecture conditions
combined.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libmysqlclient18_5.5.35-rel33.0-611.squeeze_amd64&lt;/code&gt;: direct package
reference.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$Source (nginx)&lt;/code&gt;: all binary packages with &lt;code&gt;nginx&lt;/code&gt; as source
package.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!Name (~ .*-dev), mail-transport, $Version (&amp;gt;= 3.5)&lt;/code&gt;: matches all
packages that provide &lt;code&gt;mail-transport&lt;/code&gt; with name that has no suffix
&lt;code&gt;-dev&lt;/code&gt; and with version greater or equal to &lt;code&gt;3.5&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When specified on command line, query may have to be quoted according to
shell rules, so that it stays single argument:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly repo import percona stable &#39;mysql-client (&amp;gt;= 3.6)&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use package queries filter mirrors to include only packages with limited
priorities:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly mirror create -filter=&amp;quot;Priority (required)&amp;quot; wheezy-required http://mirror.yandex.ru/debian/ wheezy main
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or download single packages and all its dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly mirror create -filter=&amp;quot;nginx&amp;quot; -filter-with-deps wheezy-required http://mirror.yandex.ru/debian/ wheezy main
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pull packages with complex conditions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly snapshot pull snapshot1 source snapshot2 &#39;!Name (% *-dev), $Version (&amp;gt;= 3.5)&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or remove packages based on query:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly repo remove local-repo &#39;Name (% http-*) | $Source (webserver)&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>History</title>
      <link>http://beta.aptly.info/doc/history</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://beta.aptly.info/doc/history</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;History&lt;/h2&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;Version 0.7.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;bug fix: publish update fails on package conflicts, new flag
&lt;code&gt;-force-overwrite&lt;/code&gt; added to publish commands
(&lt;a href=&#34;https://github.com/smira/aptly/issues/90&#34;&gt;#90&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;bug fix: aptly built with go1.2+ fails to read DB of aptly built
with go1.1 or go1.0
(&lt;a href=&#34;https://github.com/smira/aptly/issues/89&#34;&gt;#89&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;aptly supports go compilers version 1.2 and up (go 1.1 is not
supported anymore)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;Version 0.7&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;direct &lt;a href=&#34;/doc/aptly/feature/s3/&#34;&gt;publishing to Amazon S3&lt;/a&gt;
(&lt;a href=&#34;https://github.com/smira/aptly/issues/15&#34;&gt;#15&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;support for new, powerful &lt;a href=&#34;/doc/aptly/feature/query/&#34;&gt;query language&lt;/a&gt; in many
commands: &lt;a href=&#34;/doc/aptly/snapshot/pull/&#34;&gt;aptly snapshot pull&lt;/a&gt;, &lt;a href=&#34;/doc/aptly/repo/move/&#34;&gt;aptly repo
move&lt;/a&gt;, &lt;a href=&#34;/doc/aptly/repo/copy/&#34;&gt;aptly repo copy&lt;/a&gt;, &lt;a href=&#34;/doc/aptly/repo/import/&#34;&gt;aptly
repo import&lt;/a&gt; and &lt;a href=&#34;/doc/aptly/repo/remove/&#34;&gt;aptly repo
remove&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;bug fix: files from conflicting packages might override each other
while publishing (&lt;a href=&#34;https://github.com/smira/aptly/issues/65&#34;&gt;#65&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;partial mirrors: filter package lists when mirroring
(&lt;a href=&#34;https://github.com/smira/aptly/issues/64&#34;&gt;#64&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;new commands: &lt;a href=&#34;/doc/aptly/mirror/rename/&#34;&gt;mirrors&lt;/a&gt;, &lt;a href=&#34;/doc/aptly/repo/rename/&#34;&gt;local
repositories&lt;/a&gt; and
&lt;a href=&#34;/doc/aptly/snapshot/rename/&#34;&gt;snapshots&lt;/a&gt; can be renamed
(&lt;a href=&#34;https://github.com/smira/aptly/issues/63&#34;&gt;#63&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;new command: &lt;a href=&#34;/doc/aptly/mirror/edit/&#34;&gt;aptly mirror edit&lt;/a&gt; allows to
change mirror filtering
(&lt;a href=&#34;https://github.com/smira/aptly/issues/63&#34;&gt;#63&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;download transfer rate could be limited either via
&lt;a href=&#34;/doc/configuration&#34;&gt;configuration&lt;/a&gt; file parameter &lt;code&gt;downloadSpeedLimit&lt;/code&gt;
or with flag &lt;code&gt;-download-limit&lt;/code&gt; for command &lt;a href=&#34;/doc/aptly/mirror/update/&#34;&gt;aptly mirror
update&lt;/a&gt;
(&lt;a href=&#34;https://github.com/smira/aptly/issues/62&#34;&gt;#62&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;new flag: &lt;code&gt;-all-matches&lt;/code&gt; for &lt;a href=&#34;/doc/aptly/snapshot/pull/&#34;&gt;aptly snapshot
pull&lt;/a&gt; enables pulling of all matching packages
(&lt;a href=&#34;https://github.com/smira/aptly/pull/70&#34;&gt;#70&lt;/a&gt;), thanks to &lt;a href=&#34;https://github.com/simonaquino&#34;&gt;Simon
Aquino&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;when matching single package in &lt;a href=&#34;/doc/aptly/snapshot/pull/&#34;&gt;aptly snapshot
pull&lt;/a&gt; latest version would be pulled
(&lt;a href=&#34;https://github.com/smira/aptly/pull/67&#34;&gt;#67&lt;/a&gt;), thanks to &lt;a href=&#34;https://github.com/simonaquino&#34;&gt;Simon
Aquino&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;new flag: &lt;code&gt;-sort&lt;/code&gt; for &lt;a href=&#34;/doc/aptly/snapshot/list/&#34;&gt;aptly snapshot list&lt;/a&gt;
allows to change order of snapshots in the list
(&lt;a href=&#34;https://github.com/smira/aptly/pull/73&#34;&gt;#73&lt;/a&gt;), thanks to &lt;a href=&#34;https://github.com/simonaquino&#34;&gt;Simon
Aquino&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;bug fix: publish update fails on empty multi-component repo
(&lt;a href=&#34;https://github.com/smira/aptly/issues/66&#34;&gt;#66&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;bug fix: &lt;a href=&#34;/doc/aptly/snapshot/pull/&#34;&gt;aptly snapshot pull&lt;/a&gt; might remove
already pulled packages
(&lt;a href=&#34;https://github.com/smira/aptly/issues/78&#34;&gt;#78&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;bug fix: aptly package was missing &lt;code&gt;bzip2&lt;/code&gt; dependency
(&lt;a href=&#34;https://github.com/smira/aptly/issues/84&#34;&gt;#84&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;aptly binary packages are built with go1.3&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Version 0.6&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;support for multi-component published repositories
(&lt;a href=&#34;https://github.com/smira/aptly/issues/36&#34;&gt;#36&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;handling duplicate packages with different content gracefully
(&lt;a href=&#34;https://github.com/smira/aptly/issues/60&#34;&gt;#60&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;repositories published by aptly now can be consumed by
debian-installer (&lt;a href=&#34;https://github.com/smira/aptly/issues/61&#34;&gt;#61&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;new flag: &lt;code&gt;-no-remove&lt;/code&gt; for &lt;a href=&#34;/doc/aptly/snapshot/merge/&#34;&gt;aptly snapshot
merge&lt;/a&gt; to merge snapshots with all package
versions preserved
(&lt;a href=&#34;https://github.com/smira/aptly/issues/57&#34;&gt;#57&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;publishing of empty snapshots/repositories is possible
(&lt;a href=&#34;https://github.com/smira/aptly/issues/55&#34;&gt;#55&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/doc/aptly/repo/add/&#34;&gt;aptly repo add&lt;/a&gt; now exits with 1 if any of files
failed to add (&lt;a href=&#34;https://github.com/smira/aptly/issues/53&#34;&gt;#53&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;bug fix: &lt;code&gt;Package:&lt;/code&gt; line comes first in package metadata
(&lt;a href=&#34;https://github.com/smira/aptly/issues/49&#34;&gt;#49&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;bug fix: when command parsing fails, aptly returns exit code 2
(&lt;a href=&#34;https://github.com/smira/aptly/issues/52&#34;&gt;#52&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;bug fix: pulling more than 128 packates at once
(&lt;a href=&#34;https://github.com/smira/aptly/issues/53&#34;&gt;#53&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;bug fix: &lt;a href=&#34;/doc/aptly/graph/&#34;&gt;aptly graph&lt;/a&gt; may get confused with package
pull requests (&lt;a href=&#34;https://github.com/smira/aptly/issues/58&#34;&gt;#58&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;Version 0.5.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;bug fix: &lt;code&gt;HTTP_PROXY&lt;/code&gt; environment variable has been ignored
(&lt;a href=&#34;https://github.com/smira/aptly/issues/46&#34;&gt;#46&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;bug fix: support for flat repositories in subdirectory
(&lt;a href=&#34;https://github.com/smira/aptly/issues/47&#34;&gt;#47&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;bug fix: wrong pool directory name when &lt;code&gt;Source:&lt;/code&gt; contains version
(&lt;a href=&#34;https://github.com/smira/aptly/issues/44&#34;&gt;#44&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;Version 0.5&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Debian packages for aptly are &lt;a href=&#34;/download/&#34;&gt;available&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;internal DB is compacted when calling &lt;a href=&#34;/doc/aptly/db/cleanup/&#34;&gt;aptly db
cleanup&lt;/a&gt;
(&lt;a href=&#34;https://github.com/smira/aptly/issues/19&#34;&gt;#19&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;size is shown in human-readable format
(&lt;a href=&#34;https://github.com/smira/aptly/issues/18&#34;&gt;#18&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;fixed wrong location of man page in Debian package
(&lt;a href=&#34;https://github.com/smira/aptly/issues/22&#34;&gt;#22&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;new flags: &lt;code&gt;-distribution&lt;/code&gt; and &lt;code&gt;-component&lt;/code&gt; to specify default
publishing options in &lt;a href=&#34;/doc/aptly/repo/create/&#34;&gt;aptly repo create&lt;/a&gt;
(&lt;a href=&#34;https://github.com/smira/aptly/issues/12&#34;&gt;#12&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;aptly would try harder to figure out distribution &amp;amp; component
automatically when publishing going through the tree of snapshots,
mirrors and local repositories&lt;/li&gt;
&lt;li&gt;aptly supports publishing local repositories, without intermediate
snapshot step (&lt;a href=&#34;https://github.com/smira/aptly/issues/10&#34;&gt;#10&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;new command: &lt;a href=&#34;/doc/aptly/publish/repo/&#34;&gt;aptly publish repo&lt;/a&gt; to publish
local repository directly
(&lt;a href=&#34;https://github.com/smira/aptly/issues/10&#34;&gt;#10&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;new command: &lt;a href=&#34;/doc/aptly/repo/edit/&#34;&gt;aptly publish edit&lt;/a&gt; to change
defaults for the local repository
(&lt;a href=&#34;https://github.com/smira/aptly/issues/12&#34;&gt;#12&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;aptly supports global &amp;amp; command flags placement in any position in
command line (before command name, after command name)
(&lt;a href=&#34;https://github.com/smira/aptly/issues/17&#34;&gt;#17&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;new command: &lt;a href=&#34;/doc/aptly/db/recover/&#34;&gt;aptly db recover&lt;/a&gt; to recover
internal DB after crash
(&lt;a href=&#34;https://github.com/smira/aptly/issues/25&#34;&gt;#25&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;new flag: &lt;code&gt;-raw&lt;/code&gt; to display list in machine-readable format for
commands &lt;a href=&#34;/doc/aptly/mirror/list/&#34;&gt;aptly mirror list&lt;/a&gt;, &lt;a href=&#34;/doc/aptly/repo/list/&#34;&gt;aptly repo
list&lt;/a&gt;, &lt;a href=&#34;/doc/aptly/snapshot/list/&#34;&gt;aptly snapshot list&lt;/a&gt;
and &lt;a href=&#34;/doc/aptly/publish/list/&#34;&gt;aptly publish list&lt;/a&gt;
(&lt;a href=&#34;https://github.com/smira/aptly/issues/27&#34;&gt;#27&lt;/a&gt;,
&lt;a href=&#34;https://github.com/smira/aptly/issues/31&#34;&gt;#31&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;new flags: &lt;code&gt;-origin&lt;/code&gt; and &lt;code&gt;-label&lt;/code&gt; to customize fields &lt;code&gt;Origin:&lt;/code&gt; and
&lt;code&gt;Label:&lt;/code&gt; in &lt;code&gt;Release&lt;/code&gt; files during publishing in commands &lt;a href=&#34;/doc/aptly/publish/snapshot/&#34;&gt;aptly
publish snapshot&lt;/a&gt; and &lt;a href=&#34;/doc/aptly/publish/repo/&#34;&gt;aptly publish
repo&lt;/a&gt;
(&lt;a href=&#34;https://github.com/smira/aptly/issues/29&#34;&gt;#29&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;bug fix: with some HTTP servers aptly might have given &amp;ldquo;size
mismatch&amp;rdquo; errors due to unnecessary decompression
(&lt;a href=&#34;https://github.com/smira/aptly/issues/33&#34;&gt;#33&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;new command: &lt;a href=&#34;/doc/aptly/publish/update/&#34;&gt;aptly publish update&lt;/a&gt; updates
published repo in-place
(&lt;a href=&#34;https://github.com/smira/aptly/issues/8&#34;&gt;#8&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;new command: &lt;a href=&#34;/doc/aptly/publish/switch/&#34;&gt;aptly publish switch&lt;/a&gt; switches
published snapshot in-place
(&lt;a href=&#34;https://github.com/smira/aptly/issues/8&#34;&gt;#8&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;new flag: &lt;code&gt;-latest&lt;/code&gt; for command &lt;a href=&#34;/doc/aptly/snapshot/merge/&#34;&gt;aptly snapshot
merge&lt;/a&gt; changes merge strategy to &amp;ldquo;latest
version wins&amp;rdquo; (&lt;a href=&#34;https://github.com/smira/aptly/pull/42&#34;&gt;#42&lt;/a&gt;),
thanks to &lt;a href=&#34;https://github.com/ryanuber&#34;&gt;@ryanuber&lt;/a&gt; and
&lt;a href=&#34;https://github.com/keithchambers&#34;&gt;@keithchambers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;Version 0.4.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;fixed &lt;a href=&#34;https://github.com/smira/aptly/issues/5&#34;&gt;bug&lt;/a&gt; with slashes in
component names&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;Version 0.4&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;new command: &lt;a href=&#34;/doc/aptly/db/cleanup/&#34;&gt;aptly db cleanup&lt;/a&gt; to remove
unreferenced DB entries and files&lt;/li&gt;
&lt;li&gt;new flags: &lt;code&gt;-keyring&lt;/code&gt; &amp;amp; &lt;code&gt;-secret-keyring&lt;/code&gt; for &lt;a href=&#34;/doc/aptly/snapshot/publish/&#34;&gt;aptly snapshot
publish&lt;/a&gt; command&lt;/li&gt;
&lt;li&gt;aptly supports mirroring remote repos with source packages and
publishing repositories with sources&lt;/li&gt;
&lt;li&gt;new config: &lt;code&gt;downloadSourcePackages&lt;/code&gt; to enable source package
downloading&lt;/li&gt;
&lt;li&gt;new flag: &lt;code&gt;-with-sources&lt;/code&gt; for &lt;a href=&#34;/doc/aptly/mirror/create/&#34;&gt;aptly mirror
create&lt;/a&gt; command&lt;/li&gt;
&lt;li&gt;new config &amp;amp; flag: &lt;code&gt;dependencyFollowSource&lt;/code&gt; &amp;amp; &lt;code&gt;-dep-follow-source&lt;/code&gt;
to follow &lt;code&gt;Source:&lt;/code&gt; dependencies&lt;/li&gt;
&lt;li&gt;packages are printed in lists with underscores instead of dashes,
e.g. &lt;code&gt;pkg_1.3-3_amd64&lt;/code&gt; instead of &lt;code&gt;pkg-1.3-3-amd64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;local package repositories are supported&lt;/li&gt;
&lt;li&gt;new commands in &lt;code&gt;aptly repo&lt;/code&gt; family: &lt;a href=&#34;/doc/aptly/repo/add/&#34;&gt;add&lt;/a&gt;,
&lt;a href=&#34;/doc/aptly/repo/copy/&#34;&gt;copy&lt;/a&gt;, &lt;a href=&#34;/doc/aptly/repo/create/&#34;&gt;create&lt;/a&gt;,
&lt;a href=&#34;/doc/aptly/repo/drop/&#34;&gt;drop&lt;/a&gt;, &lt;a href=&#34;/doc/aptly/repo/import/&#34;&gt;import&lt;/a&gt;,
&lt;a href=&#34;/doc/aptly/repo/list/&#34;&gt;list&lt;/a&gt;, &lt;a href=&#34;/doc/aptly/repo/move/&#34;&gt;move&lt;/a&gt;,
&lt;a href=&#34;/doc/aptly/repo/remove/&#34;&gt;remove&lt;/a&gt; and &lt;a href=&#34;/doc/aptly/repo/show/&#34;&gt;show&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;command &lt;a href=&#34;/doc/aptly/snapshot/create/&#34;&gt;aptly snapshot create&lt;/a&gt; supports
creation of snapshots from local repos&lt;/li&gt;
&lt;li&gt;aptly peak memory usage has been reduced by factor of 3x&lt;/li&gt;
&lt;li&gt;new flag &lt;code&gt;-no-remove&lt;/code&gt; for &lt;a href=&#34;/doc/aptly/snapshot/pull/&#34;&gt;aptly snapshot
pull&lt;/a&gt;: don&amp;rsquo;t remove other version of packages
when pulling (e.g. keep old versions)&lt;/li&gt;
&lt;li&gt;command &lt;a href=&#34;/doc/aptly/mirror/create/&#34;&gt;aptly mirror create&lt;/a&gt; supports
shorthand PPA url: &lt;code&gt;ppa:user/project&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;new config: &lt;code&gt;ppaDistributorID&lt;/code&gt; &amp;amp; &lt;code&gt;ppaCodename&lt;/code&gt; to specify PPA url
expansion rules&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_8&#34;&gt;Version 0.3&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;aptly snapshot show&lt;/code&gt; doesn&amp;rsquo;t show list of packages by default&lt;/li&gt;
&lt;li&gt;option &lt;code&gt;-with-packages&lt;/code&gt; to show list of packages stored in mirror
and snapshot&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aptly-dev/aptly-bash-completion&#34;&gt;bash
completion&lt;/a&gt; is
now available for aptly&lt;/li&gt;
&lt;li&gt;dropping &lt;a href=&#34;/doc/aptly/snapshot/drop/&#34;&gt;snapshots&lt;/a&gt; and
&lt;a href=&#34;/doc/aptly/mirror/drop/&#34;&gt;mirrors&lt;/a&gt; is supported&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/doc/aptly/serve/&#34;&gt;serving&lt;/a&gt; published repositories&lt;/li&gt;
&lt;li&gt;aptly does checksum validation when downloading from remote mirrors&lt;/li&gt;
&lt;li&gt;aptly verifies crypto signature on Release files&lt;/li&gt;
&lt;li&gt;aptly can create empty snapshots&lt;/li&gt;
&lt;li&gt;new global flag &lt;code&gt;-config&lt;/code&gt; to override default config location&lt;/li&gt;
&lt;li&gt;Debian flat repositories are now supported&lt;/li&gt;
&lt;li&gt;command &lt;a href=&#34;/doc/aptly/graph&#34;&gt;aptly graph&lt;/a&gt; can generate graph of
dependencies&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>aptly publish</title>
      <link>http://beta.aptly.info/doc/aptly/publish</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://beta.aptly.info/doc/aptly/publish</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly publish&lt;/h2&gt;

&lt;p&gt;Publish snapshot or local repo as Debian repository which could be
served by HTTP/FTP/rsync server. Repository is signed by user&amp;rsquo;s key with
GnuPG. Key should be created beforehand (see section GPG Keys below).
Published repository could be consumed directly by apt.&lt;/p&gt;

&lt;p&gt;Repositories could be published to Amazon S3 service: create bucket,
&lt;a href=&#34;/doc/feature/s3/&#34;&gt;configure publishing endpoint&lt;/a&gt; and use S3 endpoint when
publishing.&lt;/p&gt;

&lt;h4 id=&#34;toc_1&#34;&gt;GPG Keys&lt;/h4&gt;

&lt;p&gt;GPG key is required to sign any published repository. Key should be
generated before publishing first repository.&lt;/p&gt;

&lt;p&gt;Key generation, storage, backup and revocation is out of scope of this
document, there are many tutorials available, e.g. &lt;a href=&#34;http://fedoraproject.org/wiki/Creating_GPG_Keys&#34;&gt;this one&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Publiс part of the key should be exported from your keyring using &lt;code&gt;gpg --export --armor&lt;/code&gt; and
imported into apt keyring using &lt;code&gt;apt-key&lt;/code&gt; tool on all machines that would be using published
repositories.&lt;/p&gt;

&lt;p&gt;Signing releases is highly recommended, but if you want to skip it, you
can either use &lt;code&gt;gpgDisableSign&lt;/code&gt; configuration option or &lt;code&gt;--skip-signing&lt;/code&gt;
flag.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
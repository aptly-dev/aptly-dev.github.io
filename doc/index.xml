<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Docs on aptly - Debian repository management tool </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://www.aptly.info/doc/index.xml</link>
    <language>en-us</language>
    <author>Andrey Smirnov</author>
    
    <updated>Fri, 08 Aug 2014 11:17:38 UTC</updated>
    
    <item>
      <title>Commands</title>
      <link>http://www.aptly.info/doc/commands</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://www.aptly.info/doc/commands</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Commands&lt;/h2&gt;

&lt;p&gt;aptly supports commands in several basic categories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mirror&lt;/code&gt;: manage, update mirrors of remote repositories&lt;/li&gt;
&lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: manage local package repositories, add, remove, move, copy
packages&lt;/li&gt;
&lt;li&gt;&lt;code&gt;snapshot&lt;/code&gt;: create, merge, manage snapshots&lt;/li&gt;
&lt;li&gt;&lt;code&gt;publish&lt;/code&gt;: publish snapshot or local repository&lt;/li&gt;
&lt;li&gt;&lt;code&gt;serve&lt;/code&gt;: quickly export published repositories via HTTP&lt;/li&gt;
&lt;li&gt;&lt;code&gt;db&lt;/code&gt;: cleanup database and package pool, recover database after failure&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>aptly db cleanup</title>
      <link>http://www.aptly.info/doc/aptly/db/cleanup</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://www.aptly.info/doc/aptly/db/cleanup</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly db cleanup&lt;/h2&gt;

&lt;p&gt;Database cleanup removes information about unreferenced packages and
deletes files in the package pool that aren&amp;rsquo;t used by packages anymore.
It is a good idea to run this command after massive deletion of
mirrors, snapshots or local repos.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly db cleanup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly db cleanup
Loading mirrors and snapshots...
Loading list of all packages...
Deleting unreferenced packages (325)...
Building list of files referenced by packages...
Building list of files in package pool...
Deleting unreferenced files (325)...
Disk space freed: 0.27 GiB...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>aptly db recover</title>
      <link>http://www.aptly.info/doc/aptly/db/recover</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://www.aptly.info/doc/aptly/db/recover</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly db recover&lt;/h2&gt;

&lt;p&gt;Database recover does its best to recover database after crash. It is
recommended to backup DB before running recover. Recover procedures
ignores all index files and tries to reconstruct them from &lt;code&gt;.sst&lt;/code&gt; files.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly db recover
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly db recover
Recovering DB...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Global Flags</title>
      <link>http://www.aptly.info/doc/aptly/flags</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://www.aptly.info/doc/aptly/flags</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Global Flags&lt;/h2&gt;

&lt;p&gt;There are several flags that could be specfied almost with any aptly command.
Flags could be specified before or after command name:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly -option1 command ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Global flags are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-architectures=&amp;quot;&amp;quot;&lt;/code&gt;: list of architectures to consider during
(comma-separated), default to all available&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-config=&amp;quot;&amp;quot;&lt;/code&gt;: location of configuration file (default locations are
&lt;code&gt;/etc/aptly.conf&lt;/code&gt;, &lt;code&gt;~/.aptly.conf&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-dep-follow-all-variants=false&lt;/code&gt;: when processing dependencies,
follow a &amp;amp; b if depdency is &amp;lsquo;a|b&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-dep-follow-recommends=false&lt;/code&gt;: when processing dependencies, follow
Recommends&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-dep-follow-source=false&lt;/code&gt;: when processing dependencies, follow
from binary package to source package&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-dep-follow-suggests=false&lt;/code&gt;: when processing dependencies, follow
Suggests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Global flags override configuration parameters with similar names.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>aptly repo rename</title>
      <link>http://www.aptly.info/doc/aptly/repo/rename</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://www.aptly.info/doc/aptly/repo/rename</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly repo rename&lt;/h2&gt;

&lt;p&gt;Command changes name of the local repository. Local repository name
should be unique.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly repo rename &amp;lt;old-name&amp;gt; &amp;lt;new-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Params:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;old-name&lt;/code&gt; is current local repository name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;new-name&lt;/code&gt; is new local repository name&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly repo rename whezy-main wheezy-main

Local repository whezy-main -&amp;gt; wheezy-main has been successfully renamed.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>aptly db</title>
      <link>http://www.aptly.info/doc/aptly/db</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://www.aptly.info/doc/aptly/db</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly db&lt;/h2&gt;

&lt;p&gt;aptly db subcommands manage aptly&amp;rsquo;s internal metadata database and
package pool.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>aptly graph</title>
      <link>http://www.aptly.info/doc/aptly/graph</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://www.aptly.info/doc/aptly/graph</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly graph&lt;/h2&gt;

&lt;p&gt;aptly generates graph showing depedencies between mirrors, local repositories,
snapshots and published repositories.
 &lt;/p&gt;

&lt;p&gt;Command graph generates graph of dependencies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;between snapshots and mirrors (what mirror was used to create each snapshot)&lt;/li&gt;
&lt;li&gt;between snapshots and local repos (what local repo was used to create snapshot)&lt;/li&gt;
&lt;li&gt;between snapshots (pulling, merging, etc.)&lt;/li&gt;
&lt;li&gt;between snapshots, local repos and published repositories (how snapshots were published).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Graph is rendered to PNG file using graphviz package.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly graph
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/img/graphfull.png&#34;&gt;&lt;img src=&#34;/img/graph.png&#34; alt=&#34;Example graph from aptly graph&#34; class=&#34;img-responsive&#34;&gt;&lt;/a&gt;
 &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>aptly mirror edit</title>
      <link>http://www.aptly.info/doc/aptly/mirror/edit</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://www.aptly.info/doc/aptly/mirror/edit</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly mirror edit&lt;/h2&gt;

&lt;p&gt;Command edit allows to change mirror settings: filter query, whether
to include dependencies while filtering.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly mirror edit &amp;lt;name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Params are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; is a mirror name (given when mirror was created)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Flags:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-filter=&lt;/code&gt;: &lt;a href=&#34;/doc/feature/query/&#34;&gt;package query&lt;/a&gt; which is applied to
packages in the mirror, set to empty to disable filtering&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-filter-with-deps=false&lt;/code&gt;: when filtering, include dependencies of
matching packages as well&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to apply new filtering settings, &lt;a href=&#34;/doc/aptly/mirror/update/&#34;&gt;update&lt;/a&gt;
mirror.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly mirror edit -filter=nginx -filter-with-deps wheezy-main
Mirror [wheezy-main]: http://mirror.yandex.ru/debian/ wheezy successfully updated.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Duplicate Packages</title>
      <link>http://www.aptly.info/doc/feature/duplicate</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://www.aptly.info/doc/feature/duplicate</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Duplicate Packages&lt;/h2&gt;

&lt;p&gt;In ideal world, tuple &lt;code&gt;(architecture, name, version)&lt;/code&gt; should identify
unique package. That holds true (well, almost true) with Debian-based
distributions. If two packages with the same architecture, name and
version are coming from different sources, they should be identical.&lt;/p&gt;

&lt;p&gt;Debian &lt;a href=&#34;https://wiki.debian.org/RepositoryFormat&#34;&gt;documentation on repository
format&lt;/a&gt; explicitly forbids
duplicate packages with different content in one repository or in set of
repositories for one distribution:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A repository must not include different packages (different content)
with the same package name, version, and architecture. When a
repository is meant to be used as a supplement to another repository
this should hold for the joint main+supplement repository as well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;aptly deduplicates packages with identical
&lt;code&gt;(architecture, name, version)&lt;/code&gt; tuple and contents into one single
package record and treats them as single package. But if two packages
share architecture, name and version, but have different content, aptly
would treat them as different packages. Such packages should never be
placed into one list in aptly (into one local repo, snapshot, mirror,
etc.) When such thing happens, aptly would complain about conflict in
packages. Usually such duplicate packages with different content
represent some software packaged for different Debian distribution, so
they should never be in the same list.&lt;/p&gt;

&lt;p&gt;When aptly is publishing repository, it would give an error if
conflicting package files (same name, but different content) are put
together in one package pool. Package pool is shared by all published
repositories with the same component and prefix. The same applies to
switching snapshots or updating published repositories: if previous
state and new state contain two conflicting packages, aptly would give
an error. If you&amp;rsquo;re completely sure that this update operation is
correct, you can use flag &lt;code&gt;-force-overwrite&lt;/code&gt; to disable check for
conflicting package files.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>aptly mirror drop</title>
      <link>http://www.aptly.info/doc/aptly/mirror/drop</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://www.aptly.info/doc/aptly/mirror/drop</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly mirror drop&lt;/h2&gt;

&lt;p&gt;Drop deletes information about remote repository mirror. Package data is
not deleted (it could be still used by other mirrors or snapshots). If
mirror is used as source to create a snapshot, aptly would refuse to
delete such mirror, use flag &lt;code&gt;-force&lt;/code&gt; to override.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly mirror drop &amp;lt;name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Params:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; is mirror name which has been given during mirror creation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Flags:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-force=false&lt;/code&gt;: drop mirror even if it used as source of some
snapshot&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dropping mirror only removes metadata about the mirror, in order to
cleanup the disk space occupied by package files you might need to run
&lt;a href=&#34;/doc/aptly/db/cleanup/&#34;&gt;&lt;code&gt;aptly db cleanup&lt;/code&gt;&lt;/a&gt; command.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly mirror drop -force wheezy-main
Mirror `wheezy-main` has been removed.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>aptly snapshot verify</title>
      <link>http://www.aptly.info/doc/aptly/snapshot/verify</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://www.aptly.info/doc/aptly/snapshot/verify</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly snapshot verify&lt;/h2&gt;

&lt;p&gt;Verifies dependencies between packages in snapshot &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; and reports
unsatisfied dependencies. Command might take additional snapshots as
dependency sources.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly snapshot verify &amp;lt;name&amp;gt; [&amp;lt;source&amp;gt; ...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Params:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; is snapshot name which has been given during snapshot
creation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;source&lt;/code&gt; is a optional list of snapshot names which would be used as
additional sources&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If additional sources are given, depdencies would be searched for in
full list of &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; snapshots.&lt;/p&gt;

&lt;p&gt;If architectures are limited (with config &lt;code&gt;architectures&lt;/code&gt; or option
&lt;code&gt;-architectures&lt;/code&gt;), only mentioned architectures are checked for internal
dependencies, otherwise &lt;code&gt;aptly&lt;/code&gt; will check all architectures in the
snapshot.&lt;/p&gt;

&lt;p&gt;By using &lt;code&gt;-dep-follow-source&lt;/code&gt; global flag you can verify that snapshot
has all source packages available to re-build packages from source.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly snapshot verify snap-deb2-main
Missing dependencies (7):
  oracle-instantclient11.2-basic [i386]
  scsh-0.6 [amd64]
  fenix [amd64]
  fenix-plugins-system [amd64]
  mozart (&amp;gt;= 1.4.0) [amd64]
  scsh-0.6 (&amp;gt;= 0.6.6) [amd64]
  oracle-instantclient11.2-basic [amd64]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>http://www.aptly.info/doc/configuration</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://www.aptly.info/doc/configuration</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;aptly looks for configuration file in &lt;code&gt;/etc/aptly.conf&lt;/code&gt; and
&lt;code&gt;~/.aptly.conf&lt;/code&gt;, if no config file found, new one is created. If
&lt;code&gt;-config=&lt;/code&gt; flag is specified, aptly would use config file at specified
location. Also aptly needs root directory for database, package and
published repository storage. If not specified, directory defaults to
&lt;code&gt;~/.aptly&lt;/code&gt;, it will be created if missing.&lt;/p&gt;

&lt;p&gt;Configuration file is stored in JSON format (default values shown
below):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;rootDir&amp;quot;: &amp;quot;$HOME/.aptly&amp;quot;,
  &amp;quot;downloadConcurrency&amp;quot;: 4,
  &amp;quot;downloadSpeedLimit&amp;quot;: 0,
  &amp;quot;architectures&amp;quot;: [],
  &amp;quot;dependencyFollowSuggests&amp;quot;: false,
  &amp;quot;dependencyFollowRecommends&amp;quot;: false,
  &amp;quot;dependencyFollowAllVariants&amp;quot;: false,
  &amp;quot;dependencyFollowSource&amp;quot;: false,
  &amp;quot;gpgDisableSign&amp;quot;: false,
  &amp;quot;gpgDisableVerify&amp;quot;: false,
  &amp;quot;downloadSourcePackages&amp;quot;: false,
  &amp;quot;ppaDistributorID&amp;quot;: &amp;quot;ubuntu&amp;quot;,
  &amp;quot;ppaCodename&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;S3PublishEndpoints&amp;quot;: {
    &amp;quot;test&amp;quot;: {
      &amp;quot;region&amp;quot;: &amp;quot;us-east-1&amp;quot;,
      &amp;quot;bucket&amp;quot;: &amp;quot;repo&amp;quot;,
      &amp;quot;awsAccessKeyID&amp;quot;: &amp;quot;&amp;quot;
      &amp;quot;awsSecretAccessKey&amp;quot;: &amp;quot;&amp;quot;,
      &amp;quot;prefix&amp;quot;: &amp;quot;&amp;quot;,
      &amp;quot;acl&amp;quot;: &amp;quot;public-read&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rootDir&lt;/code&gt; is root of directory storage to store database
(&lt;code&gt;rootDir/db&lt;/code&gt;), downloaded packages (&lt;code&gt;rootDir/pool&lt;/code&gt;) and published
repositories (&lt;code&gt;rootDir/public&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;downloadConcurrency&lt;/code&gt; is a number of parallel download threads to
use when downloading packages&lt;/li&gt;
&lt;li&gt;&lt;code&gt;downloadSpeedLimit&lt;/code&gt; is a limit on download bandwidth used by aptly
in kbytes per second, 0 means unlimited&lt;/li&gt;
&lt;li&gt;&lt;code&gt;architectures&lt;/code&gt; is a list of architectures to process; if left empty
defaults to all available architectures; could be overridden with
option &lt;code&gt;-architectures&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dependencyFollowSuggests&lt;/code&gt;: follow contents of &lt;code&gt;Suggests:&lt;/code&gt; field
when processing dependencies for the package&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dependencyFollowRecommends&lt;/code&gt;: follow contents of &lt;code&gt;Recommends:&lt;/code&gt; field
when processing dependencies for the package&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dependencyFollowAllVariants&lt;/code&gt;: when dependency looks like
&lt;code&gt;package-a | package-b&lt;/code&gt;, follow both variants always&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dependencyFollowSource&lt;/code&gt;: follow dependency from binary package to
source package&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gpgDisableSign&lt;/code&gt;: don&amp;rsquo;t sign published repositories with &lt;code&gt;gpg&lt;/code&gt;, also
can be disabled on per-repo basis using &lt;code&gt;-skip-signing&lt;/code&gt; flag when
publishing&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gpgDisableVerify&lt;/code&gt;: don&amp;rsquo;t verify remote mirrors with &lt;code&gt;gpg&lt;/code&gt;, also can
be disabled on per-mirror basis using &lt;code&gt;-ignore-signatures&lt;/code&gt; flag when
creating and updating mirrors&lt;/li&gt;
&lt;li&gt;&lt;code&gt;downloadSourcePackages&lt;/code&gt;: if enabled, all mirrors created would have
flag set to download source packages; this setting could be
controlled on per-mirror basis with &lt;code&gt;-with-sources&lt;/code&gt; flag&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ppaDistributorID&lt;/code&gt; &amp;amp; &lt;code&gt;ppaCodename&lt;/code&gt; specifies paramaters for short
PPA url expansion, if left blank they default to output of
&lt;code&gt;lsb_release&lt;/code&gt; command&lt;/li&gt;
&lt;li&gt;&lt;code&gt;S3PublisEndpoints&lt;/code&gt; is a configuration of Amazon S3 publishing
endpoints (see below)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;alert alert-warning alert-note&#34;&gt;&lt;strong&gt;Warning:&lt;/strong&gt; &lt;code&gt;rootDir&lt;/code&gt; contains all the downloaded packages from remote
mirrors, so it should have enough space. For example. mirror of Debian
wheezy (amd64 and i386) requires 70 GiB of disk space.&lt;/div&gt;

&lt;p&gt;aptly would use HTTP proxy configured in &lt;code&gt;HTTP_PROXY&lt;/code&gt; environment
variable.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>aptly publish list</title>
      <link>http://www.aptly.info/doc/aptly/publish/list</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://www.aptly.info/doc/aptly/publish/list</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly publish list&lt;/h2&gt;

&lt;p&gt;Lists repositories that have been published with
&lt;code&gt;aptly publish snapshot&lt;/code&gt; and &lt;code&gt;aptly publish repo&lt;/code&gt;. For each repository information about
&lt;code&gt;endpoint&lt;/code&gt;, &lt;code&gt;prefix&lt;/code&gt; and &lt;code&gt;distribution&lt;/code&gt; is listed along with &lt;code&gt;component&lt;/code&gt;
and architecture list. Information about snapshot or local repo being published is appended
to published repository description.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly publish list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Flags:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-raw=false&lt;/code&gt;: display list in machine-readable format&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Format of the list is following: &lt;code&gt;endpoint:prefix/distribution [architecture list] publishes {local repo/snapshot description}&lt;/code&gt;.
Empty &lt;code&gt;prefix&lt;/code&gt; is displayed as &lt;code&gt;.&lt;/code&gt;, if repository is published on local filesystem, &lt;code&gt;endpoint&lt;/code&gt; would be empty.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly publish list
Published repositories:
  * ./sq-b [amd64, i386] publishes {main: [back3]: Snapshot from mirror [backports2]: http://mirror.yandex.ru/backports.org/ squeeze-backports}
  * s3:repo:./squeeze-backports [amd64, i386] publishes {contrib: [back3]: Snapshot from mirror [backports2]: http://mirror.yandex.ru/backports.org/ squeeze-backports}

$ aptly publish list -raw
. sq-b
. squeeze-backports
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>aptly snapshot merge</title>
      <link>http://www.aptly.info/doc/aptly/snapshot/merge</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://www.aptly.info/doc/aptly/snapshot/merge</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly snapshot merge&lt;/h2&gt;

&lt;p&gt;Command merges several &lt;code&gt;source&lt;/code&gt; snapshots into new &lt;code&gt;destination&lt;/code&gt; snapshot.
Merge happens from left to right. By default, packages with the same
name-architecture pair are replaced during merge (package from latest snapshot on the list wins).&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;-latest&lt;/code&gt; flag, package with latest version wins. With &lt;code&gt;-no-remove&lt;/code&gt;
flag, all versions of packages are preserved during merge.&lt;/p&gt;

&lt;p&gt;If only one snapshot is specified, merge copies &lt;code&gt;source&lt;/code&gt; into &lt;code&gt;destination&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly snapshot merge &amp;lt;destination&amp;gt; &amp;lt;source&amp;gt; [&amp;lt;source&amp;gt;...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Params:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;destination&lt;/code&gt; is a name of the snapshot that would be created&lt;/li&gt;
&lt;li&gt;&lt;code&gt;source&lt;/code&gt; is a list of snapshot names that would be merged together&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Flags:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-latest=false&lt;/code&gt;: use only the latest version of each package&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-no-remove=false&lt;/code&gt;: don&amp;rsquo;t remove duplicate arch/name packages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly snapshot merge debian-w-backports debian-main debian-backports

Snapshot debian-w-backports successfully created.
You can run &#39;aptly publish snapshot debian-w-backports&#39; to publish snapshot as Debian repository.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>aptly snapshot drop</title>
      <link>http://www.aptly.info/doc/aptly/snapshot/drop</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://www.aptly.info/doc/aptly/snapshot/drop</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly snapshot drop&lt;/h2&gt;

&lt;p&gt;Drop removes information about snapshot. If snapshot is published, it
can&amp;rsquo;t be dropped (first remove publishing for snapshot). If snapshot is
used as source for other snapshots (using merge or pull), aptly would
refuse to drop such snapshot, use flag &lt;code&gt;-force&lt;/code&gt; to override this check.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly snapshot drop &amp;lt;name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Params:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; is snapshot name which has been given during snapshot
creation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Flags:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-force=false&lt;/code&gt;: drop snapshot even if it used as source in other
snapshots&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dropping snapshot only removes metadata, in order to cleanup the disk
space occupied by package files you might need to run
&lt;a href=&#34;/doc/aptly/db/cleanup/&#34;&gt;&lt;code&gt;aptly db cleanup&lt;/code&gt;&lt;/a&gt; command (package files would be
removed only if they&amp;rsquo;re not referenced by mirrors and other snapshots
anymore).&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ snapshot drop snap-wheezy
Snapshot `snap-wheezy` has been dropped.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>